// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum OrderStatus {
  fulfilled
  shipped
  awaiting_shipment
}

enum ProductColor {
  black
  blue
  green
  white
  red
}

model Product {
  id                     String        @id @default(cuid())
  name                   String
  imageUrl               String
  color                  ProductColor?
  amount                 Float
  description            String
  isAvailableForPurchase Boolean       @default(true)

  Order    Order[]
  Favorite Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id       String     @id @default(cuid())
  email    String     @unique
  Order    Order[]
  Favorite Favorite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id                String           @id @default(cuid())
  productId         String
  product           Product          @relation(fields: [productId], references: [id])
  user              User             @relation(fields: [userId], references: [id])
  userId            String
  amount            Float
  isPaid            Boolean          @default(false)
  status            OrderStatus      @default(awaiting_shipment)
  quantity          Int              @default(1)
  shippingAddress   ShippingAddress? @relation(fields: [shippingAddressId], references: [id])
  shippingAddressId String?

  createdAt DateTime @default(now())
  updated   DateTime @updatedAt
}

model ShippingAddress {
  id          String  @id @default(cuid())
  name        String
  street      String
  city        String
  postalCode  String
  country     String
  state       String?
  phoneNumber String?
  orders      Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Favorite {
  id        String  @id @default(cuid())
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  productId String
  product   Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
